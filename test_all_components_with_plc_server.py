from time import sleep

from plc_server_client import ApiClient
from plc_server_client.api.plc_rest_controller_api import PlcRestControllerApi

from database_methods import (
    migrate,
    delete_all_rows_from_pql_entity,
    delete_all_rows_from_counter_saving,
)
from extract import (
    AutoGeneratedUUID,
    AutoGeneratedField,
    Parameter,
    StateProcessor,
    SyncDatabase,
    FieldType,
)
from main import get_sorted_entitys
from plc import (
    get_api_client,
    get_controller_api,
    make_dict_from_response,
    read_response,
)

api_client: ApiClient = get_api_client()
controller_api: PlcRestControllerApi = get_controller_api(api_client)


def get_config() -> dict:
    return {
        "Cycle": {
            "fields": {
                "uuid": AutoGeneratedUUID(),
                "id": AutoGeneratedField(),
                "cycle": Parameter("%DB4560:12.0:UDINT"),
            },
            "primary_key": "id",
        },
        "ToolEquipped": {
            "fields": {
                "id": AutoGeneratedField(),
                "uuid": AutoGeneratedUUID(),
                "tool_name": Parameter("%DB444:6.0:REAL"),
            },
            "primary_key": "id",
        },
        "MaterialEquipped": {
            "fields": {
                "id": AutoGeneratedField(),
                "uuid": AutoGeneratedUUID(),
                "material_name": Parameter("%DB444.DBD22:DINT"),
                "material_typ": Parameter("%DB444.DBW20:INT"),
            },
            "primary_key": "id",
        },
    }


def test_one():
    # print(get_sorted_entitys())
    # threading.Timer(1.0,read_response,[controller_api]).start()
    migrate()
    delete_all_rows_from_pql_entity()
    delete_all_rows_from_counter_saving()
    end_result = []
    end_result.append(make_dict_from_response(read_response(controller_api)))
    processor: StateProcessor = StateProcessor(get_config())
    processor.init_context(end_result[0])
    db_sync: SyncDatabase = SyncDatabase(processor.get_result())
    db_sync.sync_database_with_index()
    sleep(1)
    for n in range(1, 12):
        end_result.append(make_dict_from_response(read_response(controller_api)))
        processor.process_state(end_result[-1])
        db_sync.set_end_result(processor.get_result())
        db_sync.sync_database_with_index()
        sleep(1)
    end_result_processor = processor.get_result()
    end_result_db = get_sorted_entitys()

    assert end_result_processor == end_result_db

    first_timestamp: str = end_result[0].get("timestamp")
    last_timestamp: str = end_result[-1].get("timestamp")

    for el in end_result_db.keys():
        first_ts_db: str = end_result_db.get(el)[0].get("start")
        last_ts_db: str = end_result_db.get(el)[-1].get("start")

        first_ts_processor: str = end_result_processor.get(el)[0].get("start")
        last_ts_processor: str = end_result_processor.get(el)[-1].get("start")

        if len(end_result_db.get(el)) == 1 and len(end_result_processor.get(el)) == 1:
            # spezial Fall start gleich ende sonst nicht
            assert (
                first_timestamp == first_ts_db == first_ts_processor
            ), f"Assertion Error first Timestamp from PLC Server: {first_timestamp} got first Timestamp from {el} as Database {first_ts_db} and from Processor {first_ts_processor}"
            assert (
                first_timestamp == last_ts_db == last_ts_processor
            ), f"Assertion Error last Timestamp from PLC Server: {first_timestamp} got first Timestamp from {el} as Database {last_ts_db} and from Processor {last_ts_processor}"
        else:
            assert (
                first_timestamp == first_ts_db == first_ts_processor
            ), f"Assertion Error first Timestamp from PLC Server: {first_timestamp} got first Timestamp from {el} as Database {first_ts_db} and from Processor {first_ts_processor}"
            assert (
                last_timestamp == last_ts_db == last_ts_processor
            ), f"Assertion Error last Timestamp from PLC Server: {last_timestamp} got first Timestamp from {el} as Database {last_ts_db} and from Processor {last_ts_processor}"
            assert get_config().get(el).get("fields")

        for parameter in get_config().get(el).get("fields"):
            element: FieldType = get_config().get(el).get("fields").get(parameter)
            if type(element) == Parameter:
                first_value_end_result = end_result[0].get(element.field_name)
                first_value_db_result = end_result_db.get(el)[0].get(parameter)
                first_value_processor = end_result_processor.get(el)[0].get(parameter)

                last_value_end_result = end_result[-1].get(element.field_name)
                last_value_db_result = end_result_db.get(el)[-1].get(parameter)
                last_value_processor = end_result_processor.get(el)[-1].get(parameter)

                if (
                    len(end_result_db.get(el)) == 1
                    and len(end_result_processor.get(el)) == 1
                ):
                    assert (
                        first_value_end_result
                        == first_value_db_result
                        == first_value_processor
                    ), f"Assertion Error {first_value_end_result} didnt match to result of db: {first_value_db_result} and processor:{first_value_processor}"

                    assert (
                        last_value_end_result
                        == first_value_db_result
                        == first_value_processor
                    ), f"Assertion Error {first_value_end_result} didnt match to result of db: {first_value_db_result} and processor:{first_value_processor}"
                else:
                    assert (
                        first_value_end_result
                        == first_value_db_result
                        == first_value_processor
                    ), f"Assertion Error {first_value_end_result} didnt match to result of db: {first_value_db_result} and processor:{first_value_processor}"

                    assert (
                        last_value_end_result
                        == last_value_db_result
                        == last_value_processor
                    ), f"Assertion Error {last_value_end_result} didnt match to result of db: {last_value_db_result} and processor:{last_value_processor}"
