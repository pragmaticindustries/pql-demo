import random


class FieldType(object):
    pass


class AutoGeneratedField(FieldType):
    pass


class Parameter(FieldType):

    def __init__(self, field_name):
        self.field_name = field_name


if __name__ == '__main__':
    """
    EntitÃ¤ten:
    * Cycle
    * MaterialEquipped
    * ToolEquipped
    
    Cycle: 
    id -> cycle_number
    
    MaterialEquipped:
    id -> Auto generated
    material_name -> material_name
    
    ToolEquipped:
    id -> Auto generated
    tool_name -> tool_name
    
    """

    current_material = "Material 1"
    current_tool = "Tool1"
    current_cycle_number = 317

    material_id = 1
    tool_id = 1
    cycle_id = 1

    states = []

    random.seed(1)

    for t in range(0, 1000):
        if random.uniform(0.0, 100.0) < 1.0:
            material_id = (material_id + 1) % 3
        current_material = f"Material {material_id}"

        if random.uniform(0.0, 100.0) < 1.0:
            tool_id += 1
        current_tool = f"Tool {material_id}"

        if random.uniform(0.0, 100.0) < 10.0:
            cycle_id += 1
        current_cycle_number = cycle_id

        state = {
            "timestamp": t,
            "material_name": current_material,
            "tool_name": current_tool,
            "cycle_number": cycle_id
        }

        print(f"Aktueller Zustand: {state}")

        states.append(state)

    config = {
        "Cycle": {
            "id": Parameter("cycle_number")
        },
        "ToolEquipped": {
            "id": AutoGeneratedField(),
            "tool_name": Parameter("tool_name")
        },
        "MaterialEquipped": {
            "id": AutoGeneratedField(),
            "material_name": Parameter("material_name")
        }
    }

    # MAGIC HERE

    result = {
        "Cycle": [
            {"cycle_id": 1, "start": 0, "end": 10},
            {"cycle_id": 2, "start": 11, "end": 25},
            # ...
        ],
        "ToolEquipped": [
            # ...
        ],
        "MaterialEquipped": [
            {"id": 1, "material_name": "Material 1", "start": 0, "end": 43}
            # ...
        ]
    }

    print(f'Letzter Zyklus: {result["Cycle"][-1].get("cycle_id")}')
    assert result["Cycle"][-1].get("cycle_id") == 114
