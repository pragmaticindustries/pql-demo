from extract import (
    Parameter,
    AutoGeneratedManyToOne,
    AutoGeneratedField,
    StateProcessor,
    AutoGeneratedOneToMany,
)

config: dict = {
    "Cycle": {
        "id": Parameter("cycle_id"),
        "material_equipped": AutoGeneratedManyToOne("MaterialEquipped", "id"),
    },
    "MaterialEquipped": {
        "id": AutoGeneratedField(),
        "material_name": Parameter("material_name"),
    },
}


def run_processor(states, config, new_config=False):
    """
    Helper Function
    :param states:
    :return:
    """

    processor = StateProcessor(config, states[0], new_config)
    for state in states:
        processor.process_state(state)
    results = processor.get_result()
    return results


def test_one():
    states = [
        {"timestamp": 1, "cycle_id": 21, "material_name": "Material 1"},
        {"timestamp": 2, "cycle_id": 21, "material_name": "Material 1"},
        {"timestamp": 3, "cycle_id": 22, "material_name": "Material 1"},
        {"timestamp": 4, "cycle_id": 22, "material_name": "Material 1"},
    ]

    results = run_processor(states, config)

    assert len(results.get("Cycle")) == 2
    assert len(results.get("MaterialEquipped")) == 1
    assert results.get("Cycle")[0].get("start") == 1
    assert results.get("Cycle")[0].get("end") == 2
    assert results.get("Cycle")[0].get("material_equipped") == 1
    assert results.get("Cycle")[1].get("material_equipped") == 1


def test_two():
    states = [
        {"timestamp": 1, "cycle_id": 21, "material_name": "Material 1"},
        {"timestamp": 2, "cycle_id": 21, "material_name": "Material 1"},
        {"timestamp": 3, "cycle_id": 22, "material_name": "Material 1"},
        {"timestamp": 4, "cycle_id": 22, "material_name": "Material 1"},
    ]

    results = run_processor(states, config)

    assert len(results.get("Cycle")) == 2
    assert len(results.get("MaterialEquipped")) == 1
    assert results.get("Cycle")[0].get("start") == 1
    assert results.get("Cycle")[0].get("end") == 2
    assert results.get("Cycle")[0].get("material_equipped") == 1
    assert results.get("Cycle")[1].get("material_equipped") == 1


def test_cycle_material_switch():
    states = [
        {"timestamp": 1, "cycle_id": 21, "material_name": "Material 1"},
        {"timestamp": 2, "cycle_id": 21, "material_name": "Material 1"},
        {"timestamp": 3, "cycle_id": 22, "material_name": "Material 2"},
        {"timestamp": 4, "cycle_id": 22, "material_name": "Material 2"},
    ]

    results = run_processor(states, config)
    print(results)

    assert len(results.get("Cycle")) == 2
    assert len(results.get("MaterialEquipped")) == 2

    assert results.get("MaterialEquipped")[0] == {
        "id": 1,
        "material_name": "Material 1",
        "start": 1,
        "end": 2,
    }
    assert results.get("MaterialEquipped")[1] == {
        "id": 2,
        "material_name": "Material 2",
        "start": 3,
        "end": 4,
    }
    assert results.get("Cycle")[0] == {
        "start": 1,
        "end": 2,
        "id": 21,
        "material_equipped": 1,
    }
    assert results.get("Cycle")[1] == {
        "start": 3,
        "end": 4,
        "id": 22,
        "material_equipped": 2,
    }


config2: dict = {
    "ToolEquipped": {"id": AutoGeneratedField(), "tool_name": Parameter("tool_name")}
}


def test_tool_and_others_not():

    states = [
        {
            "timestamp": 1,
            "cycle_id": 21,
            "material_name": "Material 1",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 2,
            "cycle_id": 21,
            "material_name": "Material 1",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 3,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 4,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool1",
        },
    ]

    results = run_processor(states, config2, True)

    assert results == {
        "ToolEquipped": [{"id": 1, "tool_name": "Tool1", "start": 1, "end": 4}]
    }


def test_tool_change_and_old_config():

    states = [
        {
            "timestamp": 1,
            "cycle_id": 21,
            "material_name": "Material 1",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 2,
            "cycle_id": 21,
            "material_name": "Material 1",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 3,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 4,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool2",
        },
        {
            "timestamp": 5,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool3",
        },
    ]

    results = run_processor(states, config2, True)

    assert results == {
        "ToolEquipped": [
            {"id": 2, "tool_name": "Tool1", "start": 1, "end": 3},
            {"id": 3, "tool_name": "Tool2", "start": 4, "end": 4},
            {"id": 4, "tool_name": "Tool3", "start": 5, "end": 5},
        ]
    }


config3: dict = {
    "ToolEquipped": {
        "id": AutoGeneratedField(),
        "tool_name": Parameter("tool_name"),
        "cycle": AutoGeneratedManyToOne("Cycle", "id"),
    },
    "Cycle": {
        "id": Parameter("cycle_id"),
    },
}


def test_tool_change_and_relation_with_cycle():

    states = [
        {
            "timestamp": 1,
            "cycle_id": 21,
            "material_name": "Material 1",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 2,
            "cycle_id": 21,
            "material_name": "Material 1",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 3,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool2",
        },
        {
            "timestamp": 4,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool2",
        },
        {
            "timestamp": 5,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool2",
        },
    ]

    results = run_processor(states, config3, True)

    assert results == {
        "ToolEquipped": [
            {"id": 1, "tool_name": "Tool1", "start": 1, "end": 2, "cycle": 21},
            {"id": 2, "tool_name": "Tool2", "start": 3, "end": 5, "cycle": 22},
        ],
        "Cycle": [{"id": 21, "start": 1, "end": 2}, {"id": 22, "start": 3, "end": 5}],
    }


config4: dict = {
    "Cycle": {
        "id": Parameter("cycle_id"),
    },
    "ToolEquipped": {
        "id": AutoGeneratedField(),
        "tool_name": Parameter("tool_name"),
        "cycle": AutoGeneratedOneToMany("Cycle", "id"),
    },
}


def test_tool_change_and_relation_befor_entity():

    states = [
        {
            "timestamp": 1,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 2,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 3,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 4,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 5,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
    ]

    results = run_processor(states, config4, True)

    assert results == {
        "Cycle": [{"id": 21, "start": 1, "end": 2}, {"id": 22, "start": 3, "end": 5}],
        "ToolEquipped": [
            {"id": 1, "tool_name": "Tool1", "start": 1, "end": 2, "cycle": 21},
            {"id": 2, "tool_name": "Tool2", "start": 3, "end": 5, "cycle": 22},
        ],
    }
