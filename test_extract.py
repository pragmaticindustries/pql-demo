import json
from typing import overload

import pytest

import extract
from database_methods import migrate, delete_all_rows, PqlEntity, get_all_entitys
from extract import (
    Parameter,
    AutoGeneratedField,
    StateProcessor,
    AutoGeneratedOneToOne,
    AutoGeneratedManyToOne,
    AutoGeneratedManyToMany,
    AutoGeneratedUUID,
)
from faker import Faker

extract.faker1 = Faker()
Faker.seed(4711)


def get_config() -> dict:
    return {
        "Cycle": {
            "fields": {
                "id": Parameter("cycle_id"),
                "uuid": AutoGeneratedUUID(),
                "material_equipped": AutoGeneratedManyToOne("MaterialEquipped", "id"),
            },
            "primary_key": "id",
        },
        "MaterialEquipped": {
            "fields": {
                "id": AutoGeneratedField(),
                "uuid": AutoGeneratedUUID(),
                "material_name": Parameter("material_name"),
            },
            "primary_key": "id",
        },
    }


def run_processor(states):
    """
    Helper Function
    :param states:
    :return:
    """
    extract.faker1 = Faker()
    Faker.seed(4711)
    processor = StateProcessor(get_config())
    processor.init_context(states[0])
    for state in states:
        processor.process_state(state)
    results = processor.get_result()
    return results


def test_one():
    states = [
        {"timestamp": 1, "cycle_id": 21, "material_name": "Material 1"},
        {"timestamp": 2, "cycle_id": 21, "material_name": "Material 1"},
        {"timestamp": 3, "cycle_id": 22, "material_name": "Material 1"},
        {"timestamp": 4, "cycle_id": 22, "material_name": "Material 1"},
    ]

    results = run_processor(states)
    print(results)
    assert len(results.get("Cycle")) == 2
    assert len(results.get("MaterialEquipped")) == 1
    assert results.get("Cycle")[0].get("start") == 1
    assert results.get("Cycle")[0].get("end") == 2
    assert results.get("Cycle")[0].get("material_equipped") == 1
    assert results.get("Cycle")[1].get("material_equipped") == 1


def test_two():
    states = [
        {"timestamp": 1, "cycle_id": 21, "material_name": "Material 1"},
        {"timestamp": 2, "cycle_id": 21, "material_name": "Material 1"},
        {"timestamp": 3, "cycle_id": 22, "material_name": "Material 1"},
        {"timestamp": 4, "cycle_id": 22, "material_name": "Material 1"},
    ]

    results = run_processor(states)
    print(results)

    assert len(results.get("Cycle")) == 2
    assert len(results.get("MaterialEquipped")) == 1
    assert results.get("Cycle")[0].get("start") == 1
    assert results.get("Cycle")[0].get("end") == 2
    assert results.get("Cycle")[0].get("material_equipped") == 1
    assert results.get("Cycle")[1].get("material_equipped") == 1


def test_cycle_material_switch():
    states = [
        {"timestamp": 1, "cycle_id": 21, "material_name": "Material 1"},
        {"timestamp": 2, "cycle_id": 21, "material_name": "Material 1"},
        {"timestamp": 3, "cycle_id": 22, "material_name": "Material 2"},
        {"timestamp": 4, "cycle_id": 22, "material_name": "Material 2"},
    ]

    results = run_processor(states)
    print(results)

    material_dict: dict = {
        "id": 1,
        "uuid": "5bb7fb0f-d8d9-415b-8725-460b8ce504db",
        "material_name": "Material 1",
        "start": 1,
        "end": 2,
    }
    material_dict2: dict = {
        "id": 2,
        "uuid": "0583542f-4cd5-413d-8c6e-3438c63be5a9",
        "material_name": "Material 2",
        "start": 3,
        "end": 4,
    }

    cycle_dict: dict = {
        "id": 21,
        "uuid": "b1cb1816-7d85-457c-9f32-2a1422d00e17",
        "start": 1,
        "end": 2,
        "material_equipped": 1,
    }
    cycle_dict2: dict = {
        "id": 22,
        "uuid": "ce9c02e4-aafb-4062-97ff-bbaaeca05990",
        "start": 3,
        "end": 4,
        "material_equipped": 2,
    }

    assert len(results.get("Cycle")) == 2
    assert len(results.get("MaterialEquipped")) == 2

    assert results.get("MaterialEquipped")[0] == material_dict
    assert results.get("MaterialEquipped")[1] == material_dict2

    assert results.get("Cycle")[0] == cycle_dict
    assert results.get("Cycle")[1] == cycle_dict2


def get_config1() -> dict:
    return {
        "ToolEquipped": {
            "fields": {
                "id": AutoGeneratedField(),
                "uuid": AutoGeneratedUUID(),
                "tool_name": Parameter("tool_name"),
            },
            "primary_key": "id",
        }
    }


def run_processor1(states):
    """
    Helper Function
    :param states:
    :return:
    """
    extract.faker1 = Faker()
    Faker.seed(4711)

    processor = StateProcessor(get_config1())
    processor.init_context(states[0])
    for state in states:
        processor.process_state(state)
    results = processor.get_result()
    return results


def test_tool_and_others_not():
    states = [
        {
            "timestamp": 1,
            "cycle_id": 21,
            "material_name": "Material 1",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 2,
            "cycle_id": 21,
            "material_name": "Material 1",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 3,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 4,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool1",
        },
    ]

    results = run_processor1(states)
    print(results)

    tool_dict: dict = {
        "ToolEquipped": [
            {
                "id": 1,
                "uuid": "b1cb1816-7d85-457c-9f32-2a1422d00e17",
                "tool_name": "Tool1",
                "start": 1,
                "end": 4,
            }
        ]
    }

    assert results == tool_dict


def get_config2() -> dict:
    return {
        "ToolEquipped": {
            "fields": {
                "id": AutoGeneratedField(),
                "uuid": AutoGeneratedUUID(),
                "tool_name": Parameter("tool_name"),
                "cycle": AutoGeneratedManyToOne("Cycle", "id"),
            },
            "primary_key": "id",
        },
        "Cycle": {
            "fields": {
                "id": Parameter("cycle_id"),
                "uuid": AutoGeneratedUUID(),
            },
            "primary_key": "id",
        },
    }


def run_processor2(states):
    """
    Helper Function
    :param states:
    :return:
    """
    extract.faker1 = Faker()
    Faker.seed(4711)

    processor = StateProcessor(get_config2())
    processor.init_context(states[0])
    for state in states:
        processor.process_state(state)
    results = processor.get_result()
    return results


def test_tool_change_and_relation_with_cycle():
    states = [
        {
            "timestamp": 1,
            "cycle_id": 21,
            "material_name": "Material 1",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 2,
            "cycle_id": 21,
            "material_name": "Material 1",
            "tool_name": "Tool1",
        },
        {
            "timestamp": 3,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool2",
        },
        {
            "timestamp": 4,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool2",
        },
        {
            "timestamp": 5,
            "cycle_id": 22,
            "material_name": "Material 2",
            "tool_name": "Tool2",
        },
    ]

    results = run_processor2(states)
    print(results)
    tool_dict: dict = {
        "ToolEquipped": [
            {
                "id": 1,
                "uuid": "b1cb1816-7d85-457c-9f32-2a1422d00e17",
                "tool_name": "Tool1",
                "start": 1,
                "end": 2,
                "cycle": 21,
            },
            {
                "id": 2,
                "uuid": "ce9c02e4-aafb-4062-97ff-bbaaeca05990",
                "tool_name": "Tool2",
                "start": 3,
                "end": 5,
                "cycle": 22,
            },
        ]
    }
    cycle_dict: dict = {
        "Cycle": [
            {
                "id": 21,
                "uuid": "5bb7fb0f-d8d9-415b-8725-460b8ce504db",
                "start": 1,
                "end": 2,
            },
            {
                "id": 22,
                "uuid": "0583542f-4cd5-413d-8c6e-3438c63be5a9",
                "start": 3,
                "end": 5,
            },
        ]
    }
    assert results.get("ToolEquipped") == tool_dict.get("ToolEquipped")

    assert results.get("Cycle") == cycle_dict.get("Cycle")


def get_config3() -> dict:
    return {
        "Cycle": {
            "fields": {
                "id": Parameter("cycle_id"),
                "uuid": AutoGeneratedUUID(),
            },
            "primary_key": "id",
        },
        "ToolEquipped": {
            "fields": {
                "id": AutoGeneratedField(),
                "uuid": AutoGeneratedUUID(),
                "tool_name": Parameter("tool_name"),
                "cycle": AutoGeneratedManyToOne("Cycle", "id"),
            },
            "primary_key": "id",
        },
    }


def run_processor3(states):
    """
    Helper Function
    :param states:
    :return:
    """
    extract.faker1 = Faker()
    Faker.seed(4711)

    processor = StateProcessor(get_config3())
    processor.init_context(states[0])
    for state in states:
        processor.process_state(state)
    results = processor.get_result()
    return results


def test_tool_change_and_relation_befor_entity():
    states = [
        {
            "timestamp": 1,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 2,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 3,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 4,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 5,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
    ]

    results = run_processor3(states)
    print(results)
    assert results == {
        "Cycle": [
            {
                "id": 21,
                "uuid": "b1cb1816-7d85-457c-9f32-2a1422d00e17",
                "start": 1,
                "end": 2,
            },
            {
                "id": 22,
                "uuid": "ce9c02e4-aafb-4062-97ff-bbaaeca05990",
                "start": 3,
                "end": 5,
            },
        ],
        "ToolEquipped": [
            {
                "id": 1,
                "uuid": "5bb7fb0f-d8d9-415b-8725-460b8ce504db",
                "tool_name": "Tool1",
                "start": 1,
                "end": 2,
                "cycle": 21,
            },
            {
                "id": 2,
                "uuid": "0583542f-4cd5-413d-8c6e-3438c63be5a9",
                "tool_name": "Tool2",
                "start": 3,
                "end": 5,
                "cycle": 22,
            },
        ],
    }

    tool_dict: dict = {
        "ToolEquipped": [
            {
                "id": 1,
                "uuid": "5bb7fb0f-d8d9-415b-8725-460b8ce504db",
                "tool_name": "Tool1",
                "start": 1,
                "end": 2,
                "cycle": 21,
            },
            {
                "id": 2,
                "uuid": "0583542f-4cd5-413d-8c6e-3438c63be5a9",
                "tool_name": "Tool2",
                "start": 3,
                "end": 5,
                "cycle": 22,
            },
        ]
    }
    cycle_dict: dict = {
        "Cycle": [
            {
                "id": 21,
                "uuid": "b1cb1816-7d85-457c-9f32-2a1422d00e17",
                "start": 1,
                "end": 2,
            },
            {
                "id": 22,
                "uuid": "ce9c02e4-aafb-4062-97ff-bbaaeca05990",
                "start": 3,
                "end": 5,
            },
        ]
    }


def get_config4() -> dict:
    return {
        "Cycle": {
            "fields": {
                "id": Parameter("cycle_id"),
                "uuid": AutoGeneratedUUID(),
            },
            "primary_key": "id",
        },
        "ToolEquipped": {
            "fields": {
                "id": AutoGeneratedField(),
                "uuid": AutoGeneratedUUID(),
                "tool_name": Parameter("tool_name"),
                "cycle": AutoGeneratedOneToOne("Cycle", "id"),
            },
            "primary_key": "id",
        },
    }


def run_processor4(states):
    """
    Helper Function
    :param states:
    :return:
    """
    extract.faker1 = Faker()
    Faker.seed(4711)

    processor = StateProcessor(get_config4())
    processor.init_context(states[0])
    for state in states:
        processor.process_state(state)
    results = processor.get_result()
    return results


def test_relation_one_to_one_true():
    states = [
        {
            "timestamp": 1,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 2,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 3,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 4,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 5,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
    ]

    results = run_processor4(states)
    print(results)
    assert results == {
        "Cycle": [
            {
                "id": 21,
                "uuid": "b1cb1816-7d85-457c-9f32-2a1422d00e17",
                "start": 1,
                "end": 2,
            },
            {
                "id": 22,
                "uuid": "ce9c02e4-aafb-4062-97ff-bbaaeca05990",
                "start": 3,
                "end": 5,
            },
        ],
        "ToolEquipped": [
            {
                "id": 1,
                "uuid": "5bb7fb0f-d8d9-415b-8725-460b8ce504db",
                "tool_name": "Tool1",
                "start": 1,
                "end": 2,
                "cycle": 21,
            },
            {
                "id": 2,
                "uuid": "0583542f-4cd5-413d-8c6e-3438c63be5a9",
                "tool_name": "Tool2",
                "start": 3,
                "end": 5,
                "cycle": 22,
            },
        ],
    }

    tool_dict: dict = {
        "ToolEquipped": [
            {
                "id": 1,
                "uuid": "5bb7fb0f-d8d9-415b-8725-460b8ce504db",
                "tool_name": "Tool1",
                "start": 1,
                "end": 2,
                "cycle": 21,
            },
            {
                "id": 2,
                "uuid": "0583542f-4cd5-413d-8c6e-3438c63be5a9",
                "tool_name": "Tool2",
                "start": 3,
                "end": 5,
                "cycle": 22,
            },
        ]
    }
    cycle_dict: dict = {
        "Cycle": [
            {
                "id": 21,
                "uuid": "b1cb1816-7d85-457c-9f32-2a1422d00e17",
                "start": 1,
                "end": 2,
            },
            {
                "id": 22,
                "uuid": "ce9c02e4-aafb-4062-97ff-bbaaeca05990",
                "start": 3,
                "end": 5,
            },
        ]
    }


def test_relation_one_to_one_false():
    states = [
        {
            "timestamp": 1,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 2,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 3,
            "tool_name": "Tool2",
            "cycle_id": 21,
            "material_name": "Material 2",
        },
        {
            "timestamp": 4,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 5,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
    ]
    with pytest.raises(RuntimeError):
        end_result = run_processor4(states)
        print(end_result)


def test_relation_one_to_one_false_two():
    states = [
        {
            "timestamp": 1,
            "tool_name": "Tool2",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 2,
            "tool_name": "Tool2",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 3,
            "tool_name": "Tool2",
            "cycle_id": 21,
            "material_name": "Material 2",
        },
        {
            "timestamp": 4,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 5,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
    ]
    with pytest.raises(RuntimeError):
        end_result = run_processor4(states)
        print(end_result)


def test_relation_one_to_one_false_three():
    states = [
        {
            "timestamp": 1,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 2,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 3,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 2",
        },
        {
            "timestamp": 4,
            "tool_name": "Tool2",
            "cycle_id": 21,
            "material_name": "Material 2",
        },
        {
            "timestamp": 5,
            "tool_name": "Tool2",
            "cycle_id": 21,
            "material_name": "Material 2",
        },
    ]
    with pytest.raises(RuntimeError):
        end_result = run_processor4(states)
        print(end_result)


def get_config5() -> dict:
    return {
        "Cycle": {
            "fields": {
                "id": Parameter("cycle_id"),
                "uuid": AutoGeneratedUUID(),
                "tool_equipped": AutoGeneratedManyToOne("ToolEquipped", "id"),
            },
            "primary_key": "id",
        },
        "ToolEquipped": {
            "fields": {
                "id": AutoGeneratedField(),
                "uuid": AutoGeneratedUUID(),
                "tool_name": Parameter("tool_name"),
            },
            "primary_key": "id",
        },
    }


def run_processor5(states):
    """
    Helper Function
    :param states:
    :return:
    """
    extract.faker1 = Faker()
    Faker.seed(4711)

    processor = StateProcessor(get_config5())
    processor.init_context(states[0])
    for state in states:
        processor.process_state(state)
    results = processor.get_result()
    return results


def test_relation_one_to_many_true():
    states = [
        {
            "timestamp": 1,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 2,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 3,
            "tool_name": "Tool1",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 4,
            "tool_name": "Tool1",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 5,
            "tool_name": "Tool1",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
    ]

    end_result = run_processor5(states)
    print(end_result)
    assert end_result == {
        "Cycle": [
            {
                "id": 21,
                "uuid": "b1cb1816-7d85-457c-9f32-2a1422d00e17",
                "start": 1,
                "end": 2,
                "tool_equipped": 1,
            },
            {
                "id": 22,
                "uuid": "ce9c02e4-aafb-4062-97ff-bbaaeca05990",
                "start": 3,
                "end": 5,
                "tool_equipped": 1,
            },
        ],
        "ToolEquipped": [
            {
                "id": 1,
                "uuid": "5bb7fb0f-d8d9-415b-8725-460b8ce504db",
                "tool_name": "Tool1",
                "start": 1,
                "end": 5,
            }
        ],
    }

    tool_dict: dict = {
        "ToolEquipped": [
            {
                "id": 1,
                "uuid": "5bb7fb0f-d8d9-415b-8725-460b8ce504db",
                "tool_name": "Tool1",
                "start": 1,
                "end": 5,
            }
        ]
    }

    cycle_dict: dict = {
        "Cycle": [
            {
                "id": 21,
                "uuid": "b1cb1816-7d85-457c-9f32-2a1422d00e17",
                "start": 1,
                "end": 2,
                "tool_equipped": 1,
            },
            {
                "id": 22,
                "uuid": "ce9c02e4-aafb-4062-97ff-bbaaeca05990",
                "start": 3,
                "end": 5,
                "tool_equipped": 1,
            },
        ]
    }


def test_relation_one_to_many_false():
    states = [
        {
            "timestamp": 1,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 2,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 3,
            "tool_name": "Tool2",
            "cycle_id": 21,
            "material_name": "Material 2",
        },
        {
            "timestamp": 4,
            "tool_name": "Tool2",
            "cycle_id": 21,
            "material_name": "Material 2",
        },
        {
            "timestamp": 5,
            "tool_name": "Tool2",
            "cycle_id": 21,
            "material_name": "Material 2",
        },
    ]
    with pytest.raises(RuntimeError):
        end_result = run_processor5(states)
        print(end_result)


def get_config6() -> dict:
    return {
        "Cycle": {
            "fields": {
                "id": Parameter("cycle_id"),
                "uuid": AutoGeneratedUUID(),
            },
            "primary_key": "id",
        },
        "ToolEquipped": {
            "fields": {
                "id": AutoGeneratedField(),
                "uuid": AutoGeneratedUUID(),
                "tool_name": Parameter("tool_name"),
                "cycle": AutoGeneratedManyToMany("Cycle", "id"),
            },
            "primary_key": "id",
        },
    }


def run_processor6(states):
    """
    Helper Function
    :param states:
    :return:
    """
    extract.faker1 = Faker()
    Faker.seed(4711)

    processor = StateProcessor(get_config6())
    processor.init_context(states[0])
    for state in states:
        processor.process_state(state)
    results = processor.get_result()
    return results


def test_relation_many_to_many_true():
    states = [
        {
            "timestamp": 1,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 2,
            "tool_name": "Tool1",
            "cycle_id": 21,
            "material_name": "Material 1",
        },
        {
            "timestamp": 3,
            "tool_name": "Tool2",
            "cycle_id": 21,
            "material_name": "Material 2",
        },
        {
            "timestamp": 4,
            "tool_name": "Tool2",
            "cycle_id": 21,
            "material_name": "Material 2",
        },
        {
            "timestamp": 5,
            "tool_name": "Tool2",
            "cycle_id": 21,
            "material_name": "Material 2",
        },
        {
            "timestamp": 6,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 7,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 8,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 9,
            "tool_name": "Tool2",
            "cycle_id": 22,
            "material_name": "Material 2",
        },
        {
            "timestamp": 10,
            "tool_name": "Tool2",
            "cycle_id": 23,
            "material_name": "Material 2",
        },
        {
            "timestamp": 11,
            "tool_name": "Tool2",
            "cycle_id": 23,
            "material_name": "Material 2",
        },
        {
            "timestamp": 12,
            "tool_name": "Tool2",
            "cycle_id": 23,
            "material_name": "Material 2",
        },
    ]

    end_result = run_processor6(states)
    print(end_result)
    assert end_result == {
        "Cycle": [
            {
                "id": 21,
                "uuid": "b1cb1816-7d85-457c-9f32-2a1422d00e17",
                "start": 1,
                "end": 5,
            },
            {
                "id": 22,
                "uuid": "0583542f-4cd5-413d-8c6e-3438c63be5a9",
                "start": 6,
                "end": 9,
            },
            {
                "id": 23,
                "uuid": "e35fd989-b021-4ac8-8c31-76236de8809a",
                "start": 10,
                "end": 12,
            },
        ],
        "ToolEquipped": [
            {
                "id": 1,
                "uuid": "5bb7fb0f-d8d9-415b-8725-460b8ce504db",
                "tool_name": "Tool1",
                "start": 1,
                "end": 2,
                "cycle": [21],
            },
            {
                "id": 2,
                "uuid": "ce9c02e4-aafb-4062-97ff-bbaaeca05990",
                "tool_name": "Tool2",
                "start": 3,
                "end": 12,
                "cycle": [21, 22, 23],
            },
        ],
    }

    tool_dict: dict = {
        "ToolEquipped": [
            {
                "id": 1,
                "uuid": "5bb7fb0f-d8d9-415b-8725-460b8ce504db",
                "tool_name": "Tool1",
                "start": 1,
                "end": 2,
                "cycle": [21],
            },
            {
                "id": 2,
                "uuid": "ce9c02e4-aafb-4062-97ff-bbaaeca05990",
                "tool_name": "Tool2",
                "start": 3,
                "end": 12,
                "cycle": [21, 22, 23],
            },
        ]
    }

    cycle_dict: dict = {
        "Cycle": [
            {
                "id": 21,
                "uuid": "b1cb1816-7d85-457c-9f32-2a1422d00e17",
                "start": 1,
                "end": 5,
            },
            {
                "id": 22,
                "uuid": "0583542f-4cd5-413d-8c6e-3438c63be5a9",
                "start": 6,
                "end": 9,
            },
            {
                "id": 23,
                "uuid": "e35fd989-b021-4ac8-8c31-76236de8809a",
                "start": 10,
                "end": 12,
            },
        ]
    }
